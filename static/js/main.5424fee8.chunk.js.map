{"version":3,"sources":["components/Conversation/MessageView/MessageView.js","components/Conversation/Conversation.js","components/MessageInput/MessageInput.js","App.js","serviceWorker.js","index.js"],"names":["MessageView","props","react_default","a","createElement","className","concat","from","message","moment","timestamp","fromNow","Conversation","this","messages","map","Conversation_MessageView_MessageView","content","key","id","Component","MessageInput","state","handleChange","e","_this","setState","target","value","type","placeholder","onChange","onClick","messageContent","bind","toISOString","unix","App","client","ApiAiClient","accessToken","addMessage","Object","toConsumableArray","push","newMessage","payload","textRequest","then","botResponse","result","fulfillment","speech","_this2","components_Conversation_Conversation","components_MessageInput_MessageInput","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wWAaeA,EATK,SAAEC,GAClB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAS,0BAAAC,OAA4BL,EAAMM,OAC5CL,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBAAmBJ,EAAMO,SACtCN,EAAAC,EAAAC,cAAA,QAAMC,UAAU,gBAAgBI,IAAOR,EAAMS,WAAWC,aCiBrDC,mLAnBP,OACIV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,0BAEXQ,KAAKZ,MAAMa,SAASC,IAAI,SAACP,GACrB,OACIN,EAAAC,EAAAC,cAACY,EAAD,CACIT,KAAMC,EAAQD,KACdC,QAASA,EAAQS,QACjBP,UAAWF,EAAQE,UACnBQ,IAAKV,EAAQW,eAXdC,aC2BZC,oNA1BXC,MAAQ,CAACd,QAAS,MAElBe,aAAe,SAACC,GACZC,EAAKC,SAAS,CAAClB,QAASgB,EAAEG,OAAOC,MAAOrB,KAAM,oFAI9C,OACIL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,2BACXH,EAAAC,EAAAC,cAAA,SAAOyB,KAAK,OAAOC,YAAY,eAAeC,SAAUlB,KAAKU,eAC7DrB,EAAAC,EAAAC,cAAA,UAAQ4B,QAASnB,KAAKZ,MAAMgC,eAAeC,KAAKrB,KACxC,CACIN,KAAM,SACNU,QAASJ,KAAKS,MAAMd,QACpBE,UAAWD,MAAS0B,cACpBhB,GAAIV,MAAS2B,UALzB,gBAZWhB,sBCsCZiB,6MAlCbf,MAAQ,CACNR,SAAU,MAEZwB,OAAS,IAAIC,IAAY,CAACC,YAAa,uCAQvCC,WAAa,SAAClC,EAAMU,EAASP,EAAWS,GACtC,IAAIL,EAAQ4B,OAAAC,EAAA,EAAAD,CAAOjB,EAAKH,MAAMR,UAC9BA,EAAS8B,KAAK,CAACrC,KAAMA,EAAMU,QAASA,EAASP,UAAWA,EAAWS,GAAIA,IACvEM,EAAKC,SAAS,CAACZ,gBAGjB+B,WAAa,SAACC,GACZrB,EAAKgB,WAAWK,EAAQvC,KAAMuC,EAAQ7B,QAAS6B,EAAQpC,UAAWoC,EAAQ3B,IAC1EM,EAAKa,OAAOS,YAAYD,EAAQ7B,SAAS+B,KAAK,SAACC,GAC7CxB,EAAKgB,WAAW,MAAOQ,EAAYC,OAAOC,YAAYC,OAAQH,EAAYvC,UAAWuC,EAAY9B,0FAfjF,IAAAkC,EAAAxC,KAClBA,KAAKyB,OAAOS,YAAY,SAASC,KAAK,SAACC,GACrCI,EAAKZ,WAAW,MAAOQ,EAAYC,OAAOC,YAAYC,OAAQH,EAAYvC,UAAWuC,EAAY9B,uCAkBnG,OACEjB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACkD,EAAD,CAAcxC,SAAUD,KAAKS,MAAMR,WACnCZ,EAAAC,EAAAC,cAACmD,EAAD,CAActB,eAAgBpB,KAAKgC,qBA7BzBzB,aCMEoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,KAAK,SAAAqB,GACjCA,EAAaC","file":"static/js/main.5424fee8.chunk.js","sourcesContent":["import React from 'react';\r\nimport './MessageView.scss';\r\nimport moment from 'moment'\r\n\r\nconst MessageView = ( props ) => {\r\n    return (\r\n        <div className={`message-container from-${props.from}`}>\r\n            <p className=\"message-content\">{props.message}</p>\r\n            <span className=\"message-time\">{moment(props.timestamp).fromNow()}</span>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MessageView","import React, { Component } from 'react';\r\nimport './Conversation.scss';\r\nimport MessageView from './MessageView/MessageView';\r\n\r\nclass Conversation extends Component {\r\n    render () {\r\n        return (\r\n            <div className=\"conversation-container\">\r\n                {\r\n                this.props.messages.map((message) => {\r\n                    return (\r\n                        <MessageView\r\n                            from={message.from}\r\n                            message={message.content}\r\n                            timestamp={message.timestamp}\r\n                            key={message.id}\r\n                        />\r\n                    )\r\n                })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Conversation","import React, { Component } from 'react';\r\nimport './MessageInput.scss';\r\nimport moment from 'moment';\r\nclass MessageInput extends Component {\r\n\r\n    state = {message: ''}\r\n\r\n    handleChange = (e) => {\r\n        this.setState({message: e.target.value, from: 'client'})\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"message-input-container\">\r\n                <input type=\"text\" placeholder=\"Your Message\" onChange={this.handleChange} />\r\n                <button onClick={this.props.messageContent.bind(this, \r\n                        {\r\n                            from: 'client',\r\n                            content: this.state.message,\r\n                            timestamp: moment().toISOString(),\r\n                            id: moment().unix()\r\n                        }\r\n                    )}>\r\n                    Send\r\n                </button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default MessageInput","import React, { Component } from 'react';\nimport './App.scss';\nimport Conversation from './components/Conversation/Conversation';\nimport MessageInput from './components/MessageInput/MessageInput';\nimport { ApiAiClient } from 'api-ai-javascript';\n\nclass App extends Component {\n  state = {\n    messages: []\n  }\n  client = new ApiAiClient({accessToken: 'c61614b13f724f8f97e9854d29093d7b'});\n\n  componentDidMount() {\n    this.client.textRequest('hello').then((botResponse) => {\n      this.addMessage('bot', botResponse.result.fulfillment.speech, botResponse.timestamp, botResponse.id);\n    })\n  }\n\n  addMessage = (from, content, timestamp, id) => {\n    let messages = [...this.state.messages];\n    messages.push({from: from, content: content, timestamp: timestamp, id: id});\n    this.setState({messages});\n  }\n\n  newMessage = (payload) => {\n    this.addMessage(payload.from, payload.content, payload.timestamp, payload.id);\n    this.client.textRequest(payload.content).then((botResponse) => {\n      this.addMessage('bot', botResponse.result.fulfillment.speech, botResponse.timestamp, botResponse.id);\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Conversation messages={this.state.messages} />\n        <MessageInput messageContent={this.newMessage}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}